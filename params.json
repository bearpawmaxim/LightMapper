{
  "name": "Lightmapper",
  "tagline": "My own mapper called LightMapper",
  "body": "# LightMapper\r\n## Features\r\nA small mapper with a base set of functionality, that:\r\n- [x] Is easy to set up and use\r\n- [x] Uses Reflection.Emit for creation of mapping methods dynamically \r\n- [x] Performs mapping as fast as lighting\r\n- [x] Can map properties/fields from **SourceT** class type to **TargetT** class type\r\n- [x] Have an ability to set explicit property/field to property/field mapping _(eg. TargetClass.DiffField2 = SourceClass.DiffField1)_\r\n- [x] Can execute explicit **Action<SourceT, TargetT>** before/after mapping\r\n- [ ] Can execute explicit actions of **TargetT** base class (in progress)\r\n- [ ] Can map nested classes (in progress, can be done with help of explicit actions)\r\n\r\n## Examples\r\n### Initialization & Mapping creation\r\n```C#\r\nvar mapper = LightMapper.Instance; // or new LightMapper(); \r\n\r\n// Creates a mapping from SourceClass to TargetClass\r\n// including properties and fields\r\nvar mappingItem = _mapper.CreateMapper<SourceClass, TargetClass>(true);\r\n// Registers a mapping\r\nmapper.AddMapping(mappingItem);\r\n```\r\n\r\n### Setting Explicit actions and fields\r\n```C#\r\n// Creates a mapping from SourceClass to TargetClass\r\nvar mappingItem = _mapper.CreateMapper<SourceClass, TargetClass>(true)\r\n    // sets BoolProp to true if DateTimeProp value is older than the week\r\n    .Explicit((src, trg) => trg.BoolProp = src.DateTimeProp < DateTime.Now.AddDays(-7))\r\n    // sets that the DiffField1 of SourceClass will be mapped into DiffField2 of TargetClass\r\n    .ExplicitField(t => t.DiffField2, s => s.DiffField1);\r\n// Registers a mapping (LightMapper will compile mapping methods)\r\nmapper.AddMapping(mappingItem);\r\n```\r\n\r\n### Updating & Deleting a mapping\r\nUpdating a mapping\r\n```C#\r\n// gets existing mapping fo SourceClass to TargetClass\r\nvar mappingItem = _mapper.GetMapping<SourceClass, TargetClass>();\r\n// sets that the DiffProp1 of SourceClass will be mapped into DiffProp2 of TargetClass\r\nmappingItem.ExplicitField(t => t.DiffProp2, s => s.DiffProp1);\r\n// updates mapping (LightMapper will recompile mapping methods)\r\n_mapper.UpdateMapping(mappingItem);\r\n```\r\n\r\nRemoving a mapping\r\n```C#\r\n// removes mapping of SourceClass to TargetClass\r\nvar mappingItem = _mapper.RemoveMapping<SourceClass, TargetClass>();\r\n```\r\n\r\n### Mapping\r\nMapping of single instance of SourceClass to TargetClass\r\n```C#\r\nSourceClass src = GetFromDbOrCreateOne();\r\nTargetClass targ = _mapper.Map<SourceClass, TargetClass>(src);\r\n```\r\n\r\nMapping of collection of SourceClass to collection of TargetClass\r\n```C#\r\nIEnumerable<SourceClass> srcList = GetFromDbOrCreateCollection();\r\nIEnumerable<TargetClass> = _mapper.Map<SourceClass, TargetClass>(srcList);\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}